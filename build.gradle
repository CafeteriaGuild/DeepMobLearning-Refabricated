plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.3.1'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17
compileKotlin.kotlinOptions.jvmTarget = "17"

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

def RELEASE_TYPE =
        project.mod_version.contains('ALPHA') ? 'alpha' :
        project.mod_version.contains('BETA') ? 'beta'
        : 'release'

@SuppressWarnings('GrMethodMayBeStatic')
def getChangeLog() {
    return ""
}

def ENV = System.getenv()


repositories {
    maven { url = "https://jitpack.io" }
    maven { url = "https://maven.terraformersmc.com/releases/" }
    maven { url = "https://maven.cafeteria.dev/releases/" }
    maven { url = "https://maven.cafeteria.dev/" }
}

dependencies {
    api project(path: ":base", configuration: "namedElements")
    include project(path: ":base", configuration: "namedElements")

    api project(path: ":modular-armor", configuration: "namedElements")
    include project(path: ":modular-armor", configuration: "namedElements")

    api project(path: ":simulacrum", configuration: "namedElements")
    include project(path: ":simulacrum", configuration: "namedElements")

    modRuntimeOnly "com.terraformersmc:modmenu:${project.modmenuVersion}"
}

allprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'org.jetbrains.kotlin.jvm'

    version = project.mod_version

    repositories {
        maven { url = "https://maven.cafeteria.dev/releases/" }
        maven { url = "https://maven.cafeteria.dev/" }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
        modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

        modApi("dev.nathanpb:KtDataTagLib:${project.ktdatataglib_version}")
        include("dev.nathanpb:KtDataTagLib:${project.ktdatataglib_version}")
    }

    jar {
        exclude("**/*.bbmodel")
        exclude("**/*.xcf")
        from "LICENSE"
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    configurations.configureEach {
        resolutionStrategy.force("net.fabricmc:fabric-loader:${project.loader_version}")
    }

}



publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            url "https://maven.cafeteria.dev/releases"
            credentials {
                username = project.property("mcdUsername")
                password = project.property("mcdPassword")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}"}
    }
}

curseforge {
    if(ENV.CURSEFORGE_API_KEY) {
        apiKey = ENV.CURSEFORGE_API_KEY
    }

    project {
        id = project.curseforge_id
        changelog = getChangeLog()
        releaseType = RELEASE_TYPE

        addGameVersion(project.minecraft_version)
        addGameVersion("Fabric")

        mainArtifact(remapJar)  {
            relations {
                requiredDependency("fabric-api")
                requiredDependency("fabric-language-kotlin")

                optionalDependency("roughly-enough-items")
            }
        }

        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }

    }

    options {
        forgeGradleIntegration = false
    }
}

modrinth {
    if(ENV.MODRINTH_TOKEN) {
        token = ENV.MODRINTH_TOKEN
    }

    projectId = project.modrinth_id
    versionNumber = project.mod_version
    uploadFile = remapJar
    gameVersions = [project.minecraft_version]
    loaders = ['fabric']
    versionType = RELEASE_TYPE
    changelog = getChangeLog()
    dependencies {
        required.project 'fabric-api'
        required.project 'fabric-language-kotlin'
    }
}